@page "/vehiculos"
@rendermode InteractiveServer
@using VehiculosBlazor.Domain.BehiculoDto

<PageTitle>Gestión de Vehículos</PageTitle>

<!-- Formulario para agregar un nuevo vehículo -->
<div class="form-group mb-2">
    <label for="nombre">Nombre del vehículo</label>
    <input @bind="vehiculo.Nombre" type="text" class="form-control" placeholder="Ingrese el nombre del vehículo" />
</div>

<div class="form-group mb-2">
    <label for="marca">Marca del vehículo</label>
    <input @bind="vehiculo.Marca" type="text" class="form-control" placeholder="Ingrese la marca del vehículo" />
</div>

<div class="form-group mb-2">
    <label for="modelo">Modelo del vehículo</label>
    <input @bind="vehiculo.Modelo" type="text" class="form-control" placeholder="Ingrese el modelo del vehículo" />
</div>

<div class="form-group mb-2">
    <label for="placa">Placa del vehículo</label>
    <input @bind="vehiculo.Placa" type="text" class="form-control" placeholder="Ingrese la placa del vehículo" />
</div>

<!-- Botón para agregar vehículo -->
<span class="btn btn-primary" @onclick="Agregar">Agregar Vehículo</span>

<!-- Lista de vehículos -->
<div class="card mt-3">
    <div class="card-header">
        Vehículos Existentes
    </div>
    <div class="card-body">
        <div class="container">
            @if (ListaVehiculos.Any())
            {
                @foreach (var v in ListaVehiculos)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">@v.Nombre</h5>
                            <p><strong>Marca:</strong> @v.Marca</p>
                            <p><strong>Modelo:</strong> @v.Modelo</p>
                            <p><strong>Placa:</strong> @v.Placa</p>
                            <button class="btn btn-danger" @onclick="() => Eliminar(v.Id)">Eliminar</button>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No hay vehículos registrados.</p>
            }
        </div>
    </div>
</div>

@code
{
    // Instancia para manejar un nuevo vehículo
    private VehiculoDto vehiculo = new VehiculoDto();
    
    // Lista en memoria para almacenar los vehículos
    public List<VehiculoDto> ListaVehiculos { get; set; } = new List<VehiculoDto>();

    /// <summary>
    /// Agrega un vehículo a la lista
    /// </summary>
    void Agregar()
    {
        // Asignar un ID único a cada vehículo (si es necesario)
        vehiculo.Id = ListaVehiculos.Count > 0 ? ListaVehiculos.Max(v => v.Id) + 1 : 1;

        // Verificar si se ha ingresado el nombre del vehículo
        if (string.IsNullOrEmpty(vehiculo.Nombre))
        {
            Console.WriteLine("El nombre del vehículo es obligatorio.");
            return;
        }

        // Agregar el vehículo a la lista en memoria
        ListaVehiculos.Add(vehiculo);

        // Limpiar el formulario para agregar un nuevo vehículo
        vehiculo = new VehiculoDto();

        // Forzar la actualización de la vista
        StateHasChanged();
    }

    /// <summary>
    /// Elimina un vehículo de la lista
    /// </summary>
    /// <param name="Id">ID del vehículo a eliminar</param>
    void Eliminar(int Id)
    {
        // Eliminar el vehículo de la lista por su ID
        var vehiculoAEliminar = ListaVehiculos.FirstOrDefault(v => v.Id == Id);
        if (vehiculoAEliminar != null)
        {
            ListaVehiculos.Remove(vehiculoAEliminar);
        }

        // Forzar la actualización de la vista
        StateHasChanged();
    }
}



